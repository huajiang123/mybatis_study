##mybatis是一种半自动的ORM映射工具
因为mybatis不像Hibernate那样直接自动完成关联对象或者关联对象集合的映射，而是需要手动的进行。其实也就是要使用association标签完成一对一的映射，使用collection完成一对多的映射。  
##${}和#{}的区别
${}是字符串替换，#{}是预编译处理，也就是说mybatis在处理#{}时，会将#{}替换为？，使用PreparedStatement的set方法来赋值。  
使用#{}可以有效防止sql注入  

##模糊查询like语句该怎么写
第一种：在java代码中添加sql通配符  
例如：  
`String name = "%zhangsan%";
List<name> names = mapper.selectlike(name);
<select id = selectlike >
select * from user where name like #{names}
</select>`  
第二种：在sql中添加通配符（该方法会引起sql注入）  
例如：  
`String name = "zhangsan";
List<name> names = mapper.selectlike(name);
<select id = selectlike >
select * from user where name like "%"#{names}"%"
</select>`
第三种：使用mysql的CONCAT函数（concat函数在不同的数据库中是不同方法，orecale的concat函数只有两个参数）  
例如：  
`<select id = selectlike>
select * from user where name like concat('%',#{name},'%')`   
第四种：<u>使用mybatis中的<bind>标签（通用）</u>  
`<select id = selectlike>
 <bind name = "pattern" value = "'%' + _parameter.name + '%'"
select * from user where name like #{pattern}`
##Dao接口
Dao接口即Mapper接口。Dao接口的全限定名就是Mapper标签中的namespace的值，接口中的方法名就是Mapper中的statement的id。  
在mybatis中，每一<select>,<insert>,<update>,<delete>标签，都会被解析为一个MapperStatement对象。  
Mapper接口的工作原理是jdk的动态代理机制，mybatis运行时会使用jdk的动态代理机制为Mapper接口生成代理对象Proxy，代理对象会拦截接口方法，
转而执行MapperStatement所代表的sql，然后返回执行的结果。
##mybatis分页
分页可以分为：  
逻辑分页：  逻辑分页就是采取将所有的数据查出来后，在内存中进行分页，然后返回指定的页。
物理分页： 就是使用limit关键字在查询的时候，查出指定的页的数据。  
mybatis的分页方式有三种。  
1. 使用mybatis提供的RowBounds类进行逻辑分页。  
例如：   
`public interface userDao{  
     List<UserEntity> selectList(RowBounds rowbounds);  
}  
RowBounds rowbounds = new RowBounds(offset,limit);  
userdao.selectList(rowbounds);  
`  
2. 使用sql语句的limit 进行物理分页 
3. 使用mybatis的PageHelper插件进行物理分页（实现原理就是去实现了mybatis的interceptor接口，在执行语句前加上了limit关键字）  
例如：  
`public interface UserServiceImpl implements UserService{
   public PageInfo<UserEntity> selectPage(int pageNum,int pageSize){
        PageHelper.startPage(pageNum,pageSize);
        List list = userdao.selectList();
        return new PageInfo<>(list);
   }
}`  
##mybatis映射结果集为POJO
mybatis将结果集映射成为POJO的方式有两种：  
1. 使用标签方式，即<resultMap> 标签。  
2. sql中使用与POJO中属性相同的别名。有了对应关系后，mybatis使用反射机制创建对象，同时使用反射给对象的属性赋值。
##mybatis批量插入
有三种基本方式：  
1. 直接使用循环调用，依次插入。性能极低，而且会造成链接崩掉。  
2. 使用mybatis的batch提交。  
    sqlSession sqlsession = SqlSessionFactory.openSession(executype.batch);  
    for(UserEntity user:users){
    userDao.insert(user);
    }  
    sqlsession.commit();
    sqlsession.close();  
3. 使用foreach标签，效率最高。  
##获取自动生成主键
insert方法总是返回一个int值，这个值代表插入的行数。  
如果采用主键自增，自动生成的主键会被设置到传入的参数中。  
##mybatis接口绑定
其实就是把mybatis中接口的方法与xml中的sql进行绑定。  
有两种方式：  
1. 使用注解，例如： @select,@update  
2. xml文件中的namespace  
##mybatis延迟加载的原理
在mybatis配置文件中可以配置是否启用延迟加载 lazyLadingEnable  
原理：使用CGLIB创建目标对象的代理对象。